docker.enabled = true

params {
	executor = 'google-lifesciences'

	// tools' specific options
	GuppyGPUOptions="--gpu_runners_per_device 32 --device auto"
	GuppyNumCallers=16
	megalodonGPUOptions="--devices 0"
	DeepSignal_isgpu = 'no'
	processors=16

	//Input used by pipeline, located in zenodo, such as https://zenodo.org/record/4730517/files/reference_genome.tar.gz
	zenodoNumber="4730517"
	deepmod_ctar = "https://zenodo.org/record/${zenodoNumber}/files/C.tar.gz"
	genome_annotation_tar = "https://zenodo.org/record/${zenodoNumber}/files/genome-annotation.tar.gz"
	reference_genome_tar = "https://zenodo.org/record/${zenodoNumber}/files/reference_genome.tar.gz"
	deepsignel_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/model.CpG.R9.4_1D.human_hx1.bn17.sn360.v0.1.7%2B.tar.gz"
	megalodon_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/megalodon_model.tar.gz"
}

google {
	lifeSciences.bootDiskSize = params.gls_bootDiskSize
	lifeSciences.preemptible = params.gls_preemptible
	zone = params.zone
	network = params.network
	subnetwork = params.subnetwork
}

process {
	echo = params.echo

	container = params.containerName

	cpus = params.resquiggle_cpus
	memory =  params.resquiggle_memory
	disk = '700 GB'
	errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }
	maxRetries = 3

  	withLabel: with_gpus {
		echo = params.echo

		container = params.containerName
		containerOptions = params.containerOptions
		cpus = params.with_gpus_process_cpus
		memory =  params.with_gpus_process_memory
		accelerator = [request: params.n_accelerators, type: params.accelerator ]
		errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }
		maxRetries = 3
	}

	withName: Untar {
		//TODO: disk specificatoin

	}


	withName: Resquiggle {
		cpus = params.resquiggle_cpus
		memory =  params.resquiggle_memory
	}

	withName: Tombo {
		cpus = params.resquiggle_cpus
		memory =  params.resquiggle_memory
		// exit=32 means 'Broken pipe' bug in Tombo
		errorStrategy = { task.exitStatus in [14, 32] ? 'retry' : 'terminate' }
	}

	withName: Megalodon { // We may need add memory for Megalodon, so we put it here for special one
		containerOptions = params.containerOptions

		cpus = params.with_gpus_process_cpus
		memory =  params.with_gpus_process_memory
		accelerator = [request: params.n_accelerators, type: params.accelerator ]
	}
}
