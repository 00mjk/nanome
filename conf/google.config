docker.enabled = true

params {
	executor = 'google-lifesciences'

	processors=16
	// tools' specific options
	GuppyGPUOptions = "--gpu_runners_per_device ${params.processors * 8} --device auto"
	GuppyNumCallers = processors * 8
	megalodonGPUOptions = "--devices 0"
	DeepSignal_isgpu = 'no'

	//Input used by pipeline, located in zenodo, such as https://zenodo.org/record/4730517/files/reference_genome.tar.gz
	zenodoNumber="4730517"
	deepmod_ctar = "https://zenodo.org/record/${zenodoNumber}/files/C.tar.gz"
	genome_annotation_tar = "https://zenodo.org/record/${zenodoNumber}/files/genome-annotation.tar.gz"
	reference_genome_tar = "https://zenodo.org/record/${zenodoNumber}/files/reference_genome.tar.gz"
	deepsignel_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/model.CpG.R9.4_1D.human_hx1.bn17.sn360.v0.1.7%2B.tar.gz"
	megalodon_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/megalodon_model.tar.gz"
}

google {
	lifeSciences.bootDiskSize = params.gls_bootDiskSize
	lifeSciences.preemptible = params.gls_preemptible
	zone = params.zone
	network = params.network
	subnetwork = params.subnetwork
}

process {
	// Common process configurations on Lifebit CloudOS
	echo = params.echo
	container = params.containerName
	cpus = params.resquiggle_cpus
	memory =  params.resquiggle_memory
	disk = 500.GB
	maxRetries = 30
	
	// Adds errorStrategy for when required execution resources may be temporary unavailable e.g. network congestion.
	// Nextflow docs: 
	errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }

	withName: DeepSignal {
	errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
    }

	withName: Tombo {
		errorStrategy = { task.exitStatus in [14, 32] ? 'retry' : 'ignore' }
	}

	withName: EnvCheck { // We may need add memory for Megalodon, so we put it here for special one
		containerOptions = params.containerOptions

		cpus = params.with_gpus_process_cpus
		memory =  params.with_gpus_process_memory
		accelerator = [request: params.n_accelerators, type: params.accelerator ]
	}
	
	withName: Untar {
		errorStrategy = { task.attempt == process.maxRetries ?  'ignore' : 'retry' }
	}

	withName: Basecall { // We may need add memory for Megalodon, so we put it here for special one
		containerOptions = params.containerOptions

		cpus = params.with_gpus_process_cpus
		memory =  params.with_gpus_process_memory
		accelerator = [request: params.n_accelerators, type: params.accelerator ]
	}

	withName: Guppy { // We may need add memory for Megalodon, so we put it here for special one
		containerOptions = params.containerOptions

		cpus = params.with_gpus_process_cpus
		memory =  params.with_gpus_process_memory
		accelerator = [request: params.n_accelerators, type: params.accelerator ]
	}

	withName: Megalodon { // We may need add memory for Megalodon, so we put it here for special one
		containerOptions = params.containerOptions

		cpus = params.with_gpus_process_cpus
		memory =  params.with_gpus_process_memory
		accelerator = [request: params.n_accelerators, type: params.accelerator ]
	}
}
