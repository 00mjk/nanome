library(methylKit)
file.list=list( system.file("extdata",
"test1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"test2.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control2.myCpG.txt", package = "methylKit") )
# read the files to a methylRawList object: myobj
myobj=methRead(file.list,
sample.id=list("test1","test2","ctrl1","ctrl2"),
assembly="hg18",
treatment=c(1,1,0,0),
context="CpG"
)
filtered.myobj=filterByCoverage(myobj,lo.count=10,lo.perc=NULL,
hi.count=NULL,hi.perc=99.9)
meth=unite(filtered.myobj, destrand=FALSE)
perc.meth=percMethylation(meth)
View(perc.meth)
View(meth)
perc.meth
print(perc.meth)
View(perc.meth)
View(perc.meth)
View(myobjDB)
meth
View(perc.meth)
View(myobj)
head(myobj[[1]])
View(meth)
perc.meth=percMethylation(meth,rowids = T)
head(perc.meth)
View(file.list)
file.list
rep("txt",3)
library(randomForest)
library(caret)
library(ggplot2)
library(PRROC)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", stringsAsFactors=TRUE)
View(data)
str(data)
library(randomForest)
library(caret)
library(ggplot2)
library(PRROC)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv")
str(data)
View(data)
library(randomForest)
library(caret)
library(ggplot2)
library(PRROC)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
library(randomForest)
library(caret)
library(ggplot2)
library(PRROC)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
str(data)
head(data)
summary(data)
library(VIM)
?KNN()
library(randomForest)
library(caret)
library(ggplot2)
library(PRROC)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
str(data)
# knn imputation
knn.impute(data)
library(impute)
library(impute)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
# knn imputation
library(impute)
knn.impute(data)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
# knn imputation
library(impute)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
str(data)
knn.impute(data)
# knn imputation
library(impute)
knn.impute(data)
# knn imputation
library(impute)
#knn.impute(data)
impute.knn(data)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("bnstruct")
library(bnstruct)
?knn.impute
# knn imputation
library(bnstruct)
knn.impute(data)
library(bnstruct)
data
head(data)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
Data$UID <- NULL
head(data)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
data$UID <- NULL
head(data)
library(bnstruct)
knn.impute(data, k=3, cat.var =c(8,10))
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
data$UID <- NULL
data = data[,c(1,2,3,4,5,6,7)]
head(data)
data = read.csv("/Users/liuya/Downloads/ctimage/09-30/lesion-with-clinical.csv", na.strings="")
data$UID <- NULL
data = data[,c(1,2,3,4,5,6,7,9)]
head(data)
# knn imputation
library(bnstruct)
knn.impute(data, k=3, cat.var =c(8,10))
# knn imputation
library(bnstruct)
knn.impute(data, k=3)
# knn imputation
library(bnstruct)
knn.impute(data, k=3)
str(data)
library(methylKit)
file.list1=list( system.file("extdata",
"test1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"test2.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control2.myCpG.txt", package = "methylKit") )
datadir='/Users/liuya/Downloads/ctimage/12-28'
#setwd(datadir)
file.list=list.files(path = datadir, pattern = '*.myCpG.txt', full.names = TRUE)
file.list=list(file.list[1], file.list[2], file.list[3], file.list[4])
print(file.list)
# read the files to a methylRawListDB object: myobjDB
# and save in databases in folder methylDB
myobjDB = methRead(file.list,
sample.id = list("DeepMod", "DeepSignal", "Nanopolish", "Tombo"),
assembly = "hg38",
treatment = c(1, 1, 1, 1),
context = "CpG",
mincov = 4,
dbtype = "tabix",
dbdir = "methylDB"
)
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
jpeg(outfn)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
file.list=as.list(list.files(path = datadir, pattern = '*.myCpG.txt', full.names = TRUE))
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
dev.new(width=3, height=3, unit="in")
jpeg(outfn)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=TRUE)
dev.off()
}
ethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
dev.new(width=4, height=3, unit="in")
jpeg(outfn)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=TRUE)
dev.off()
}
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
dev.new(width=4, height=3, unit="in")
jpeg(outfn)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
dev.new(width=3, height=2, unit="in")
jpeg(outfn)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
jpeg(outfn, width=, height=2, unit="in")
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
jpeg(outfn, width=3, height=3, unit="in")
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
jpeg(outfn, width = 300, height = 300, pointsize = 14)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
jpeg(outfn, width = 400, height = 400, pointsize = 12)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.jpg", val))
jpeg(outfn, width = 400, height = 450, pointsize = 12)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = "/Users/ndphillips/Desktop/My Plot.pdf",
width = 4, # The width of the plot in inches
height = 4)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
library(methylKit)
file.list1=list( system.file("extdata",
"test1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"test2.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control2.myCpG.txt", package = "methylKit") )
datadir='/Users/liuya/Downloads/ctimage/12-28'
#setwd(datadir)
file.list=as.list(list.files(path = datadir, pattern = '*.myCpG.txt', full.names = TRUE))
file.list=list(file.list[1], file.list[2], file.list[3], file.list[4])
print(file.list)
# read the files to a methylRawListDB object: myobjDB
# and save in databases in folder methylDB
myobjDB = methRead(file.list,
sample.id = list("DeepMod", "DeepSignal", "Nanopolish", "Tombo"),
assembly = "hg38",
treatment = c(1, 1, 1, 1),
context = "CpG",
mincov = 4,
dbtype = "tabix",
dbdir = "methylDB"
)
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = "/Users/ndphillips/Desktop/My Plot.pdf",
width = 4, # The width of the plot in inches
height = 4)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = outfn,
width = 4, # The width of the plot in inches
height = 4)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
library(methylKit)
file.list1=list( system.file("extdata",
"test1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"test2.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control1.myCpG.txt", package = "methylKit"),
system.file("extdata",
"control2.myCpG.txt", package = "methylKit") )
datadir='/Users/liuya/Downloads/ctimage/12-28'
#setwd(datadir)
file.list=as.list(list.files(path = datadir, pattern = '*.myCpG.txt', full.names = TRUE))
file.list=list(file.list[1], file.list[2], file.list[3], file.list[4])
print(file.list)
# read the files to a methylRawListDB object: myobjDB
# and save in databases in folder methylDB
myobjDB = methRead(file.list,
sample.id = list("DeepMod", "DeepSignal", "Nanopolish", "Tombo"),
assembly = "hg38",
treatment = c(1, 1, 1, 1),
context = "CpG",
mincov = 4,
dbtype = "tabix",
dbdir = "methylDB"
)
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = outfn,
width = 4, # The width of the plot in inches
height = 4)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
library(methylKit)
datadir='/Users/liuya/Downloads/ctimage/12-28'
#setwd(datadir)
file.list=as.list(list.files(path = datadir, pattern = '*.myCpG.txt', full.names = TRUE))
file.list=list(file.list[1], file.list[2], file.list[3], file.list[4])
print(file.list)
# read the files to a methylRawListDB object: myobjDB
# and save in databases in folder methylDB
myobjDB = methRead(file.list,
sample.id = list("DeepMod", "DeepSignal", "Nanopolish", "Tombo"),
assembly = "hg38",
treatment = c(1, 1, 1, 1),
context = "CpG",
mincov = 4,
dbtype = "tabix",
dbdir = "methylDB"
)
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = outfn,
width = 4, # The width of the plot in inches
height = 4)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
library(methylKit)
datadir='/Users/liuya/Downloads/ctimage/12-28'
#setwd(datadir)
file.list=as.list(list.files(path = datadir, pattern = '*.myCpG.txt', full.names = TRUE))
# read the files to a methylRawListDB object: myobjDB
# and save in databases in folder methylDB
myobjDB = methRead(file.list,
sample.id = list("DeepMod", "DeepSignal", "Nanopolish", "Tombo"),
assembly = "hg38",
treatment = c(1, 1, 1, 1),
context = "CpG",
mincov = 4,
dbtype = "tabix",
dbdir = "methylDB"
)
#getMethylationStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = outfn,
width = 4, # The width of the plot in inches
height = 4)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = outfn,
width = 4, # The width of the plot in inches
height = 4.5)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
nStats(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = outfn,
width = 4, # The width of the plot in inches
height = 5)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
pdf(file = outfn,
width = 5, # The width of the plot in inches
height = 6)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
quartz(pointsize = 12) # define point size
pdf(file = outfn,
width = 5, # The width of the plot in inches
height = 6)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
ts(myobj[[4]], plot = TRUE, both.strands = FALSE)
for (val in c(1,2,3,4)) {
outfn = file.path(datadir, sprintf("cov-stats-%d.pdf", val))
#jpeg(outfn, width = 400, height = 450, pointsize = 12)
quartz(pointsize = 16) # define point size
pdf(file = outfn,
width = 5, # The width of the plot in inches
height = 6)
getCoverageStats(myobjDB[[val]],plot=TRUE,both.strands=FALSE)
dev.off()
}
setwd("/Users/liuya/PycharmProjects/nano-compare/src/rplot_func")
perf_data <- read.csv(file = 'performance-results.csv')
View(perf_data)
wdir="/Users/liuya/PycharmProjects/nano-compare/src/rplot_func"
infn='performance-results.csv'
setwd(wdir)
perf_data <- read.csv(file = infn)
View(perf_data)
print(perf_data)
ggplot(perf_data, aes(x=Location, y=Accuracy))+
geom_bar(stat='identity', fill="forest green")+
ylab("Accuracy")
library(ggplot2)
ggplot(perf_data, aes(x=Location, y=Accuracy))+
geom_bar(stat='identity', fill="forest green")+
ylab("Accuracy")
sel_data=perf_data[perf_data$Dataset=='K562' , ]
View(sel_data)
perf_data$Location
locations=c("Singletons", "Non-singletons", "Discordant", "Concordant")
locations
"Singletons" %in% locations
"Sing1letons" %in% locations
dsname='K562'
locations=c("Singletons", "Non-singletons", "Discordant", "Concordant")
sel_data=perf_data[perf_data$Dataset=='K562' & perf_data$Location %in% locations , ]
View(sel_data)
ggplot(sel_data, aes(x=locations, y=Accuracy))+
geom_bar(stat='identity', fill="forest green")+
facet_wrap(~Tool)
ggplot(sel_data, aes(x=Tool, y=Accuracy))+
geom_bar(stat='identity', fill="forest green")+
facet_wrap(~Location)
dsname='K562'
locations=c("Genome-wide", "CpG Island", "Promoters", "Exons", "Intergenic", "Introns")
sel_data=perf_data[perf_data$Dataset=='K562' & perf_data$Location %in% locations , ]
ggplot(sel_data, aes(x=Tool, y=Accuracy))+
geom_bar(stat='identity', fill="forest green")+
facet_wrap(~Location)
dsname='K562'
locations=c("Genome-wide", "CpG Island", "Promoters", "Exons", "Intergenic", "Introns")
sel_data=perf_data[perf_data$Dataset=='K562' & perf_data$Location %in% locations , ]
ggplot(sel_data, aes(x=Tool, y=Accuracy))+
geom_bar(stat='identity', fill="forest green")+
facet_wrap(~Location)
wdir = "/Users/liuya/PycharmProjects/nano-compare/src/rplot_func"
setwd(wdir)
source('utils_plotr.R')
infn = 'performance-results.csv'
# Load data and sort string orders
perf_data <- read.csv(file = infn)
perf_data$Tool <- factor(perf_data$Tool, levels = Tool.Order)
perf_data$Location <- factor(perf_data$Location, levels = Coord.Order)
# Plot using functions
perf.measure = 'Accuracy'
bar.plot.performance(perf_data, perf.measure, locations = locations.Genome)
wdir = "/Users/liuya/PycharmProjects/nano-compare/src/rplot_func"
setwd(wdir)
source('utils_plotr.R')
infn = 'performance-results.csv'
# Load data and sort string orders
perf_data <- read.csv(file = infn)
perf_data$Tool <- factor(perf_data$Tool, levels = Tool.Order)
perf_data$Location <- factor(perf_data$Location, levels = Coord.Order)
# Plot using functions
perf.measure = 'Accuracy'
bar.plot.performance(perf_data, perf.measure, locations = locations.Genome)
wdir = "/Users/liuya/PycharmProjects/nano-compare/src/rplot_func"
setwd(wdir)
source('utils_plotr.R')
infn = 'performance-results.csv'
# Load data and sort string orders
perf_data <- read.csv(file = infn)
perf_data$Tool <- factor(perf_data$Tool, levels = Tool.Order)
perf_data$Location <- factor(perf_data$Location, levels = Coord.Order)
# Plot using functions
perf.measure = 'Accuracy'
bar.plot.performance(perf_data, perf.measure, locations = locations.Genome)
wdir = "/Users/liuya/PycharmProjects/nano-compare/src/rplot_func"
setwd(wdir)
source('utils_plotr.R')
infn = 'performance-results.csv'
# Load data and sort string orders
perf_data <- read.csv(file = infn)
perf_data$Tool <- factor(perf_data$Tool, levels = Tool.Order)
perf_data$Location <- factor(perf_data$Location, levels = Coord.Order)
# Plot using functions
perf.measure = 'Accuracy'
bar.plot.performance(perf_data, perf.measure, locations = locations.Genome)
