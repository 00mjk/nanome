params {
	//##################################################################
	//################Reserved by LifeBit Cloud settings################
	//##################################################################
	//##################################################################
	//gpu related params
	containerOptions = '--gpus all'
	accelerator  = 'nvidia-tesla-p100'
	n_accelerators = 1
	with_gpus_process_cpus = 4
	with_gpus_process_memory = '24.GB'

	// resquiggle resource allocation
	resquiggle_cpus = 8
	resquiggle_memory = '32.GB'

	// configuration for Lifebit running Docker container
	//containerName="quay.io/lifebitai/nanome:shebang-cuda"
	containerName="quay.io/liuyangzzu/nanome:v1.3"
	echo = false
	config = 'conf/standard.config'
	executor = false
	gls_bootDiskSize = '50.GB'
	gls_preemptible = true
	zone = 'us-east1-b'
	network = 'jax-cloudos-shengli-vpc'
	subnetwork =  'cloudos-subnet'
	queueSize = 200
	//##################################################################
	//##############################End of block########################
	//##################################################################
	//##################################################################

	//Default input params
	dsname = 'TestData'
	input = 'https://github.com/liuyangzzu/nano-compare/raw/master/test_data/demo.fast5.reads.tar.gz'
	outputDir="outputs"

	eval=false // if perform evaluations after callings
	runBasecall=true
	runMethcall=true

	runid = "TestData_RRBS"
	bgtruthWithEncode="bismark:/projects/li-lab/Nanopore_compare/data/NA19240/NA19240_RRBS_ENCFF000LZS_rep1.Read_R1.Rep_1_trimmed_bismark_bt2.CpG_report.txt.gz;/projects/li-lab/Nanopore_compare/data/NA19240/NA19240_RRBS_ENCFF000LZT_rep2.Read_R1.Rep_2_trimmed_bismark_bt2.CpG_report.txt.gz"
	bgtruth_cov=5
	tool_cov=3

	processors = 8
	// used for HPC
	condaEnvName="/home/liuya/anaconda3/envs/nanome"
	// used for google computing platform
	glsContainerName = 'us.gcr.io/jax-nanopore-01/nanome:v1.3'

	// Reference genome from online inputs
	referenceGenome="reference_genome/hg38/hg38.fasta"
	chromSizesFile="reference_genome/hg38/hg38.chrom.sizes"
	dataType="human"  // can be human, ecoli, etc.

	//##################################################################
	//################Reserved by tools default settings################
	//##################################################################
	//##################################################################
	//Default tool settings and params
	runResquiggle=true
	runTombo=true
	runDeepSignal=true
	runDeepMod=true
	runGuppy=true
	runMegalodon=true
	runNanopolish=true

	// Used for DeepSignal gpu support
	DeepSignal_isgpu = 'no'
	// Resquiggle specifications
	resquiggleCorrectedGroup="RawGenomeCorrected_000"

	// DeepMod options
	DeepModMoveOptions="--move" // options of Guppy basecalled input for DeepMod, empty for Albacore usage
	DeepModSumChrSet="" //used by DeepMod, default "" means all Human chromosomes, else need to specify such as chr1,chr2

	// Guppy model specificatoins
	//This model is the Guppy basecall used model
	GUPPY_BASECALL_MODEL="dna_r9.4.1_450bps_hac.cfg"
	GuppyGPUOptions="--gpu_runners_per_device 16 --device auto"
	GuppyNumCallers=16
	BasecallGroupName="Basecall_1D_000" // may be Basecall_1D_000 if have been previous basecalled
	cleanAnalyses=false // true if clean previous analysis in fast5 inputs

	//This model is suggested by Megalodon
	MEGALODON_MODEL_FOR_GUPPY_CONFIG="res_dna_r941_min_modbases_5mC_v001.cfg"
	GUPPY_TIMEOUT = 240
	READS_PER_GUPPY_BATCH = 100
	SAMTOOLS_PATH="samtools"
	megalodonGPUOptions=""

	// DeepMod default used model specifications
	DeepModGithub="https://github.com/WGLab/DeepMod/archive/refs/tags/v0.1.3.tar.gz"
	deepModModel="rnn_conmodC_P100wd21_f7ne1u0_4/mod_train_conmodC_P100wd21_f3ne1u0"
	clusterDeepModModel="na12878_cluster_train_mod-keep_prob0.7-nb25-chr1/Cg.cov5.nb25"

	//Input used by pipeline, located in zenodo  https://zenodo.org/record/4730517/files/reference_genome.tar.gz
	zenodoNumber="4730517"
	deepmod_ctar = "https://zenodo.org/record/${zenodoNumber}/files/C.tar.gz"
	genome_annotation_tar = "https://zenodo.org/record/${zenodoNumber}/files/genome-annotation.tar.gz"
	reference_genome_tar = "https://zenodo.org/record/${zenodoNumber}/files/reference_genome.tar.gz"
	deepsignel_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/model.CpG.R9.4_1D.human_hx1.bn17.sn360.v0.1.7%2B.tar.gz"
	megalodon_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/megalodon_model.tar.gz"
	//##################################################################
	//##############################End of block########################
	//##################################################################
	//##################################################################
}

// Running on different platforms
profiles {

	docker {
		process.container="quay.io/lifebitai/nanome:shebang-cuda"
		docker.enabled = true
	}
	
	standard { includeConfig params.config }

	winter { // run on HPC winter GPU settings
		includeConfig 'conf/hpc.config'

		// Include tools' gpu specific options
		includeConfig 'conf/tool_options_on_gpu.config'

		// Guppy gpu dir
		params.GuppyDir="/projects/li-lab/software/ont-guppy-gpu_4.2.2"
		// Export Guppy dir to env
		env.PATH = "${params.GuppyDir}/bin:$PATH"

		executor.name ='slurm'
		// process.conda = "${params.condaEnvName}"
		process.conda = '/home/liuya/anaconda3/envs/nanome'
		process.cache = 'lenient'
		// Slurm options for winter HPC
		process.queue='gpu'
		process.clusterOptions="-q inference -n ${params.processors} --gres=gpu:1 --time=06:00:00 --mem=70G"
	}

	sumner { // run on HPC sumner with CPU support
		includeConfig 'conf/hpc.config'

		// Include tools' cpu specific options
		includeConfig 'conf/tool_options_on_cpu.config'

		// Guppy cpu dir
		params.GuppyDir="/projects/li-lab/software/ont-guppy-cpu_4.2.2"
		//Export Guppy dir to env
		env.PATH = "${params.GuppyDir}/bin:$PATH"
		// Slurm options for sumner HPC
		process.queue='compute'
		process.clusterOptions="-q batch -n ${params.processors} --time=72:00:00 --mem=70G"
	}

	sumner2 {
		process.executor = 'slurm'
		process.beforeScript = 'module load singularity'
		singularity {
			enabled = true
			autoMounts = true
		}
	}

	// Google cloud computing platform
	gls {
		executor {
			name = 'google-lifesciences'
			queueSize = 50
		}
		docker {
			enabled = true
			temp = 'auto'
		}
		google.project = 'jax-nanopore-01'
		//google.zone = 'us-east1-c'
		google.location = 'us' // 'us'
		google.region  = 'us-east1'	// 'us-east1'
		google.lifeSciences.debug = true
		google.lifeSciences.preemptible = true
		google.lifeSciences.usePrivateAddress = false
		google.lifeSciences.sshDaemon = true
		google.lifeSciences.bootDiskSize = '50 GB'
		google.enableRequesterPaysBuckets = true
		google.lifeSciences.network = 'default'
		google.lifeSciences.subnetwork = 'default'

		// Include tools' gpu specific options
		includeConfig 'conf/tool_options_on_gpu.config'

		process {
			//container = 'us.gcr.io/jax-nanopore-01/nanome:v1.1'
			//container = 'quay.io/lifebitai/nanome:shebang-cuda'
			container = params.glsContainerName
			machineType = 'n1-standard-1'
			cpus = 8
			memory = '50 GB'
			disk = '250 GB'
			maxRetries = 3
			cache = 'lenient'

			echo = params.echo

			withLabel: with_gpus { //us.gcr.io/jax-nanopore-01/nanome:v1.1
				//container = 'us.gcr.io/jax-nanopore-01/nanome:v1.1'
				//container = 'quay.io/lifebitai/nanome:shebang-cuda'
				container = params.glsContainerName
				machineType = 'n1-standard-1'
				cpus = 8
				memory = '40 GB'
				disk = '280 GB'
				accelerator = [request:  1, type: 'nvidia-tesla-p100' ]
				maxRetries = 3
				cache = 'lenient'

				echo = params.echo
			}
		}
	}
}

executor {
	name = params.executor
	queueSize = params.queueSize
}

manifest {
	homePage = 'https://nanome.jax.org'
	description = 'The nanome Pipeline of evaluation DNA methylation calling tools for Oxford Nanopore sequencing'
	mainScript = 'main.nf'
	version = '1.0.0'
}
